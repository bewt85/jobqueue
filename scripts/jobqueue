#!/usr/bin/env python

import logging

from jobqueue.parser import get_arguments
from jobqueue.queue import Queue

def done(queue, args):
  queue.status(args.job_id, update='DONE')

def exit_command(queue, args):
  queue.status(args.job_id, update='EXIT')

def get(queue, args):
  print queue.get(args.job_id)

def lease(queue, args):
  if args.job_id:
    print queue.lease(job_id=args.job_id, timeout=args.timeout)
  else:
    print queue.lease(timeout=args.timeout)

def put(queue, args):
  for job in args.jobs:
    logging.debug("Adding the following job: '%s'" % job)
    queue.put(job)

def pop(queue, args):
  logging.debug("Popping a job")
  print queue.pop()

def status(queue, args):
  jobs = queue.list()
  if args.job_ids:
    jobs = [(job_id, job, status, timeout) for ob, status, timeout in jobs
            if job in args.job_ids]
  print "\t".join(['id', 'job', 'status', 'timeout'])
  for job in jobs:
    print "\t".join(map(str, job))

if __name__ == '__main__':
  logging.basicConfig(level=logging.WARN)
  args = get_arguments()
  queue = Queue(args.database.name)
  func_lookup = {
    'done': done,
    'exit': exit_command,
    'get': get,
    'lease': lease,
    'pop': pop,
    'put': put,
    'status': status
  }
  func = func_lookup[args.sub_command]
  func(queue, args)
